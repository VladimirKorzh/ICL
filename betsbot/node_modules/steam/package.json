{
  "name": "steam",
  "version": "0.5.7",
  "description": "Lets you interface with Steam without running an actual Steam client",
  "author": {
    "name": "Nicholas",
    "email": "vvnicholas@gmail.com"
  },
  "main": "./lib/steam_client",
  "repository": {
    "type": "git",
    "url": "https://github.com/seishun/node-steam.git"
  },
  "dependencies": {
    "adm-zip": "*",
    "crc": "*",
    "protobuf": "*",
    "ref": "*",
    "ursa": "*"
  },
  "engines": {
    "node": "0.10.x"
  },
  "readme": "# Steam for Node.js\n\nThis is a Node.js port of [SteamKit2](https://bitbucket.org/VoiDeD/steamre/wiki/Home). It lets you interface with Steam without running an actual Steam client. Could be used to run an autonomous chat/trade bot.\n\nThe API is scarce compared to SteamKit2 - however, most chat and trade functions are implemented.\n\n\n# Installation\n\n```\nnpm install steam\n```\n\nNote: starting from version 0.5.5, node-steam does not support Node.js versions below 0.10.0.\n\nWindows note: this module depends on [ursa](https://github.com/Obvious/ursa). Follow its installation prerequisites first.\n\n# Usage\nFirst, `require` this module.\n```js\nvar Steam = require('steam');\n```\n`Steam` is now a namespace (implemented as an object) containing the `SteamClient` class, `servers` property, and a huge collection of enums (implemented as objects). More on those below.\n\nThen you'll want to create an instance of `SteamClient`, call its `logOn` method and assign event listeners.\n\n```js\nvar bot = new Steam.SteamClient();\nbot.logOn('username', 'password');\nbot.on('loggedOn', function() { /* ... */});\n```\n\nSee example.js for the usage of some of the available API.\n\n# Servers\n\n`Steam.servers` contains the list of CM servers node-steam will attempt to connect to. The bootstrapped list (see [servers.js](https://github.com/seishun/node-steam/blob/master/lib/servers.js)) is not always up-to-date and might contain dead servers. To avoid ETIMEDOUT errors, replace it with your own list before logging in if you have one (see ['servers' event](#servers-1)).\n\n# SteamID\n\nSince JavaScript's `Number` type does not have enough precision to store 64-bit integers, SteamIDs are represented as decimal strings. (Just wrap the number in quotes)\n\n# Enums\n\nWhenever a method accepts (or an event provides) an `ESomething`, it's a `Number` that represents some enum value. See [steam_language.js](https://github.com/seishun/node-steam/tree/master/lib/generated/steam_language.js) for the whole list of them.\n\nNote that you can't easily get the string value from the number, but you probably don't need to. You can still use them in conditions (e.g. `if (type == Steam.EChatEntryType.Emote) ...`) or switch statements.\n\n# Properties\n\n## steamID\n\nYour own SteamID.\n\n## users\n\nInformation about users you have encountered. It's an object with the following structure:\n\n```js\n{\n  \"steamID of the user\": {\n    playerName: \"the user's current profile name\",\n    gameName: \"the title of the game the user is currently playing\"\n    // ...and other properties that come directly from Steam\n  }\n  // ...other users\n}\n```\n\n## chatRooms\n\nInformation about chat rooms you have joined. It's an object with the following structure:\n```js\n{\n  \"steamID of the chat\": {\n    \"steamID of one of the chat's current members\": {\n      rank: \"EClanPermission\",\n      permissions: \"a bitset of values from EChatPermission\"\n    }\n    // other members\n  }\n  // other chats\n}\n```\n\nFor example, `Object.keys(steamClient.chatRooms[chatID])` will return an array of the chat's current members, and `steamClient.chatRooms[chatID][memberID].permissions & Steam.EChatPermission.Kick` will evaluate to a nonzero value if the specified user is allowed to kick from the specified chat.\n\n# Methods\n\n## logOn(username, password, [sentry], [code])\n\nConnects to Steam and logs you on upon connecting. If your account has Steam Guard enabled, you should provide at least one of the below:\n\n* `sentry` - your sentry file hash (see ['sentry' event](#sentry)).\n* `code` - the Steam Guard code you'll receive by email. If you have previously logged into another account using node-steam, providing the old hash along with the code will allow you to reuse the same hash for multiple accounts.\n\nIf you provide neither, the logon will fail and you'll receive an email with the code.\n\n## webLogOn(callback)\n\nLogs into Steam Community. You only need this if you know you do. `callback` will be called with your new cookie (as a string).\n\nDo not call this before the first [`webSessionID` event](#websessionid), or you'll get a broken cookie. Feel free to call this whenever you need to refresh your web session - for example, if you log into the same account from a browser on another computer.\n\n## gamesPlayed(appIDs)\n\nTells Steam you are playing game(s). `appIDs` is an array of AppIDs, for example `[570]`. Multiple AppIDs can (used to?) be used for multi-game idling.\n\n## setPersonaName(name)\n\nChanges your Steam profile name.\n\n## setPersonaState(EPersonaState)\n\nYou'll want to call this with `EPersonaState.Online` upon logon, otherwise you'll show up as offline.\n\n## sendMessage(steamID, message, [EChatEntryType])\n\nLast parameter defaults to `EChatEntryType.ChatMsg`. Another type you might want to use is `EChatEntryType.Emote`.\n\n## addFriend(steamID)\n\nSends a friend request.\n\n## removeFriend(steamID)\n\nRemoves a friend.\n\n## joinChat(steamID)\n\nJoins the chat room of the specified group. Go to the group's Community page, press Ctrl+U and search for \"joinchat\". Will silently fail if you are not allowed to join.\n\n## leaveChat(steamID)\n\nLeaves the chat room of the specified group. Will silently fail if you are not currently in it. Removes the chat from [chatRooms](#chatrooms).\n\n## lockChat(steamID)\n## unlockChat(steamID)\n\nLocks and unlocks a chat room respectively.\n\n## setModerated(steamID)\n## setUnmoderated(steamID)\n\nEnables and disables officers-only chat respectively.\n\n## kick(chatSteamID, memberSteamID)\n## ban(chatSteamID, memberSteamID)\n## unban(chatSteamID, memberSteamID)\n\nSelf-explanatory.\n\n## trade(steamID)\n\nSends a trade request to the specified user.\n\n## respondToTrade(tradeID, acceptTrade)\n\nSame `tradeID` as the one passed through the [`tradeProposed` event](#tradeproposed). `acceptTrade` should be `true` or `false`.\n\n## cancelTrade(steamID)\n\nCancels your proposed trade to the specified user.\n\n## toGC(appID, type, body, [callback])\n\nSends a message to Game Coordinator. `body` must be a serialized message without the header (it will be added by node-steam). `type` must be masked accordingly if it's a protobuf message. If `callback` is provided and this message receives a response (jobID based), the ['fromGC' event](#fromgc) will not be emitted, but instead `callback` will be called with `type` and `body` of the response.\n\n# Events\n\n## 'error'\n* `e` - an `Error` object\n\nSomething preventing continued operation of node-steam has occurred. `e.cause` is a string containing one of these values:\n* 'logonFail' - can't log into Steam. `e.eresult` is an `EResult`, the logon response. Some values you might want to handle are `InvalidPassword`, `AlreadyLoggedInElsewhere` and `AccountLogonDenied` (Steam Guard code required).\n* 'loggedOff' - you were logged off for a reason other than Steam going down. `e.eresult` is an `EResult`, most likely `LoggedInElsewhere`.\n\n## 'loggedOn'\n\nYou can now safely use all API.\n\n## 'webSessionID'\n* your new sessionID\n\nIf you are using Steam Community (including trading), you should call [`webLogOn`](#weblogoncallback) again, since your current cookie is no longer valid.\n\n## 'sentry'\n* a Buffer containing your Steam Guard sentry file hash\n\nIf you didn't provide a hash when logging in, Steam will send you one through this event. If you have Steam Guard enabled, you should save this and use it for your further logons. It will not expire unlike the code.\n\n## 'servers'\n* an Array containing the up-to-date server list\n\nnode-steam will use this new list when reconnecting, but it will be lost when your application restarts. You might want to save it to a file or a database and assign it to [`Steam.servers`](#servers) before logging in next time.\n\nNote that `Steam.servers` will be automatically updated _after_ this event is emitted. This will be useful if you want to compare the old list with the new one for some reason - otherwise it shouldn't matter.\n\n## 'loggedOff'\n\nYou were logged off from Steam due to it going down. ['disconnected'](#disconnected) should follow immediately afterwards. Wait until it reconnects.\n\n## 'disconnected'\n\nEither you were disconnected from Steam, or a connection attempt failed. Don't use any API now - wait until it reconnects.\n\n## 'chatInvite'\n* SteamID of the chat you were invited to\n* name of the chat\n* SteamID of the user who invited you\n\n## 'personaState'\n* Object with new user data\n\nSomeone has gone offline/online, started a game, changed their nickname or something else. The provided object has the same structure as in the `users` property, and its `friendid` property contains the user's SteamID. Note that the `users` property is not yet updated when this event is fired, so you can compare the new state with the old one to see what changed.\n\n## 'richPresence'\n**This API is unstable.**\n* SteamID of the user\n* The user's string status (e.g. '#DOTA_RP_FINDING_MATCH' or '#DOTA_RP_PLAYING_AS')\n* Possibly extra args (in Dota 2, hero level and hero name)\n\nGame-specific information about a user. Only received when you're in the same game.\n\n## 'relationship'\n* SteamID of the user\n* `EFriendRelationship`\n\nSome activity in your friend list. For example, `EFriendRelationship.PendingInvitee` means you got a friend invite, `EFriendRelationship.None` means you got removed.\n\n## 'friendMsg'\n* SteamID of the user\n* the message\n* `EChatEntryType`\n\n## 'chatMsg'\n* SteamID of the chat room\n* the message\n* `EChatEntryType`\n* SteamID of the chatter\n\n## 'message'\nSame arguments as the above two, captures both events. In case of a friend message, the fourth argument will be undefined.\n\n## 'chatStateChange'\n* `EChatMemberStateChange`\n* SteamID of the user who entered or left the chat room, disconnected, or was kicked or banned\n* SteamID of the chat where it happened\n* SteamID of the user who kicked or banned\n\nSomething happened in a chat you are in. For example, if the first argument equals `Steam.EChatMemberStateChange.Kicked`, then someone got kicked.\n\n## 'tradeProposed'\n* Trade ID\n* SteamID of the user who proposed the trade\n\nYou were offered a trade.\n\n## 'tradeResult'\n* Trade ID\n* `EEconTradeResponse`\n* SteamID of the user you sent a trade request\n\nListen for this event if you are the one sending a trade request.\n\n## 'sessionStart'\n* SteamID of the other party\n\nThe trade is now available at http://steamcommunity.com/trade/{SteamID}. You need a cookie as described in `webLoggedOn`. You can use [node-steam-trade](https://github.com/seishun/node-steam-trade) to automate the trade itself.\n\n## 'announcement'\n* SteamID of the group\n* headline\n\nUse the group's RSS feed to get the body of the announcement if you want it.\n\n## 'fromGC'\n* appID\n* `type` - masked accordingly for protobuf\n* the message body\n\nA message has been received from GC. See also [`toGC`](#togcappid-type-body-callback).\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/seishun/node-steam/issues"
  },
  "_id": "steam@0.5.7",
  "dist": {
    "shasum": "9b57eacfcfa20da969614b43c11452f105873f43"
  },
  "_from": "steam@~0.5.5",
  "_resolved": "https://registry.npmjs.org/steam/-/steam-0.5.7.tgz"
}
